from qgis.core import QgsMessageLog, Qgis


logging = True
validator_name = "üëë–ì–æ–ª–æ–≤–Ω–∏–π –í–∞–ª—ñ–¥–∞—Ç–æ—Äüëë"

def get_desktop_path():
    import os, platform , ctypes
    system = platform.system()
    
    if system == "Windows":
        # –î–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è OneDrive —Ç–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API Windows –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É
            csidl_desktop = 0x0000  # CSIDL_DESKTOP
            path = ctypes.create_unicode_buffer(512)
            ctypes.windll.shell32.SHGetFolderPathW(None, csidl_desktop, None, 0, path)
            return path.value
        except Exception as e:
            print(f"Error retrieving desktop path on Windows: {e}")
            return os.path.join(os.environ['USERPROFILE'], 'Desktop')
    
    elif system == "Linux":
        return os.path.join(os.environ['HOME'], 'Desktop')
    
    else:
        raise NotImplementedError(f"Unsupported OS: {system}")



def log(text: str, level: int = Qgis.Info) -> None:
    if logging:
        QgsMessageLog.logMessage(
            message = text, 
            tag = validator_name, 
            level = level)

def save_dict_as_file(dictionary: dict, file_name: str, file_path: str = None) -> None:
    """
    –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ —É —Ñ–∞–π–ª.
    
    :param dictionary: —Å–ª–æ–≤–Ω–∏–∫, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏
    :param file_name: —ñ–º'—è —Ñ–∞–π–ª—É, —É —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫
    :param file_path: —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏, —É —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.
                      –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Ç–æ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è —à–ª—è—Ö –¥–æ —Å—Ç—ñ–ª—å–Ω–∏—Ü—ñ.
    """
    import json, os
    if not os.path.exists(os.path.dirname(file_path)):        
        os.makedirs(os.path.dirname(file_path))
    if file_path is None:
        file_path = os.path.join(get_desktop_path(), f"{file_name}.json")
    else:
        file_path = os.path.join(file_path, f"{file_name}.json")
    
    with open(file_path, 'w') as file:
        json.dump(dictionary, file, indent=None, ensure_ascii=False)

def save_validator_log():
    from qgis.PyQt.QtWidgets import (
    QDockWidget, QTabWidget, QPlainTextEdit,
    QApplication, QAction    
)
    from qgis.utils import iface
    from qgis.PyQt.QtCore import Qt

    def get_log_tab_content(tab_title=validator_name):
        dock = iface.mainWindow().findChild(QDockWidget, "MessageLog")
        if dock is None:
            iface.messageBar().pushWarning("Log helper", "Dock 'MessageLog' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return None

        # —Ä–æ–±–∏–º–æ –ø–∞–Ω–µ–ª—å –≤–∏–¥–∏–º–æ—é, —è–∫—â–æ —Å—Ö–æ–≤–∞–Ω–∞
        if not dock.isVisible():
            act = iface.mainWindow().findChild(QAction, "mActionShowLogMessagePanel")
            act.trigger() if act else dock.setVisible(True)
            QApplication.processEvents()

        tabs = dock.findChild(QTabWidget)
        if tabs is None:
            iface.messageBar().pushWarning("Log helper", "QTabWidget –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return None

        # —à—É–∫–∞—î–º–æ –≤–∫–ª–∞–¥–∫—É: —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–∏–π (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤)
        for i in range(tabs.count()):
            title = tabs.tabText(i).strip()
            if (title == tab_title.strip()
                    or tab_title.strip() in title
                    or title in tab_title.strip()):
                page = tabs.widget(i)

                # 1‚É£ —è–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ —î —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
                if isinstance(page, QPlainTextEdit):
                    return page.toPlainText()

                # 2‚É£ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–µ—Ä–µ–¥ –Ω–∞—â–∞–¥–∫—ñ–≤ (–≥–ª–∏–±–æ–∫–∏–π –ø–æ—à—É–∫)
                editor = page.findChild(QPlainTextEdit, options=Qt.FindChildrenRecursively)
                if editor:
                    return editor.toPlainText()

                # 3‚É£ —è–∫—â–æ –≤—Å–µ —â–µ –Ω—ñ—á–æ–≥–æ ‚Äî —ñ–Ω—Ñ–æ—Ä–º—É—î–º–æ
                iface.messageBar().pushWarning(
                    "Log helper",
                    f"QPlainTextEdit —É –≤–∫–ª–∞–¥—Ü—ñ ¬´{title}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                )
                return None

        # –≤–∫–ª–∞–¥–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö
        # available = ", ".join(tabs.tabText(i) for i in range(tabs.count()))
        # iface.messageBar().pushInfo(
        #     "Log helper",
        #     f"–í–∫–ª–∞–¥–∫—É ¬´{tab_title}¬ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞—è–≤–Ω—ñ: {available}"
        # )
        return None


    content = get_log_tab_content()    # —á–∏—Ç–∞—Ç–∏–º–µ ¬´üëë–ì–æ–ª–æ–≤–Ω–∏–π –í–∞–ª—ñ–¥–∞—Ç–æ—Äüëë¬ª
    if content:
        import os
        file_path = os.path.join(os.path.dirname(__file__), 'last_validation', f"log.txt")        
        if not os.path.exists(os.path.dirname(file_path)):        
            os.makedirs(os.path.dirname(file_path))
        
        
        with open(file_path, 'w') as file:
            file.write(content)

def compress_last_validation_folder():
    save_validator_log()
    import os, shutil
    from qgis.PyQt.QtWidgets import QFileDialog
    source_folder = os.path.join(os.path.dirname(__file__), 'last_validation')
    target_folder, _ = QFileDialog.getSaveFileName(None, "–ó–±–µ—Ä–µ–≥—Ç–∏ –∞—Ä—Ö—ñ–≤ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏", get_desktop_path(), "Zip files (*.zip)")
    if target_folder:
        if target_folder.endswith('.zip'):
            target_folder = target_folder[:-4]  # Remove the .zip extension if present
        shutil.make_archive(target_folder, 'zip', source_folder)
